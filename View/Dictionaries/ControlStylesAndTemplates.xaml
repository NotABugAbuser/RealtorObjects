<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2"
                    xmlns:c="clr-namespace:RealtorObjects.View.Converters"
                    xmlns:local="clr-namespace:RealtorObjects">
    <c:ObjectAndPropertyMultiValueConverter x:Key="ObjectAndProperty"/>
    <c:EmptyStringToBoolConverter x:Key="EmptyStringToBool"/>
    <Style x:Key="ShadowBorder" TargetType="{x:Type Border}">
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Padding" Value="5,3"/>
        <Setter Property="Background" Value="white"/>
    </Style>

    <Style TargetType="{x:Type TextBlock}" x:Key="Header">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Foreground" Value="#202020"/>
        <Setter Property="Margin" Value="3,0"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>
    <Style x:Key="FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle 
                        Margin="2" 
                        StrokeDashArray="1 2" 
                        SnapsToDevicePixels="true" 
                        StrokeThickness="1" 
                        Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ComboBoxEditableTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="MinWidth" Value="0"/>
        <Setter Property="MaxLength" Value="30"/>
        <Setter Property="FontFamily" Value="Courier New"/>
        <Setter Property="MinHeight" Value="0"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <ScrollViewer 
                        x:Name="PART_ContentHost" 
                        Background="Transparent" 
                        Focusable="false" 
                        HorizontalScrollBarVisibility="Hidden" 
                        VerticalScrollBarVisibility="Hidden"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="ClickMode" Value="Press"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid>
                        <Border 
                            x:Name="templateRoot" 
                            Background="white" 
                            BorderThickness="1" 
                            BorderBrush="{StaticResource BorderGray}" 
                            SnapsToDevicePixels="true"/>
                        <Border 
                            x:Name="splitBorder"  
                            Margin="2" 
                            HorizontalAlignment="Right" 
                            Width="16">
                            <Border.Style>
                                <Style TargetType="{x:Type Border}">
                                    <Setter Property="Background" Value="{StaticResource PrimaryViolet}"/>
                                    <Style.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter Property="Background" Value="{StaticResource SecondaryViolet}"/>
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </Border.Style>
                            <Polygon
                                HorizontalAlignment="Center"
                                IsHitTestVisible="False"
                                Fill="white"
                                Width="6"
                                Height="3"
                                Points="0,0 3,3 6,0"/>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate 
        x:Key="ComboBoxEditableTemplate" 
        TargetType="{x:Type ComboBox}">
        <Grid 
            x:Name="templateRoot" 
            SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition 
                    MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" 
                    Width="0"/>
            </Grid.ColumnDefinitions>
            <Popup 
                x:Name="PART_Popup" 
                AllowsTransparency="true" 
                Grid.ColumnSpan="2" 
                IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" 
                Placement="Bottom" 
                PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                <Themes:SystemDropShadowChrome 
                    x:Name="shadow" Color="Transparent" 
                    MinWidth="{Binding ActualWidth, ElementName=templateRoot}" 
                    MaxHeight="{TemplateBinding MaxDropDownHeight}">
                    <Border 
                        x:Name="dropDownBorder" 
                        Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" 
                        BorderThickness="1" 
                        BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}">
                        <ScrollViewer x:Name="DropDownScrollViewer">
                            <Grid 
                                x:Name="grid" 
                                RenderOptions.ClearTypeHint="Enabled">
                                <Canvas 
                                    x:Name="canvas" 
                                    HorizontalAlignment="Left" 
                                    Height="0" 
                                    VerticalAlignment="Top" 
                                    Width="0">
                                    <Rectangle 
                                        x:Name="opaqueRect" 
                                        Fill="{Binding Background, ElementName=dropDownBorder}" 
                                        Height="{Binding ActualHeight, ElementName=dropDownBorder}" 
                                        Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                </Canvas>
                                <ItemsPresenter 
                                    x:Name="ItemsPresenter" 
                                    KeyboardNavigation.DirectionalNavigation="Contained" 
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </Themes:SystemDropShadowChrome>
            </Popup>
            <ToggleButton 
                x:Name="toggleButton" 
                Background="{TemplateBinding Background}" 
                BorderThickness="{TemplateBinding BorderThickness}" 
                BorderBrush="{TemplateBinding BorderBrush}" 
                Grid.ColumnSpan="2" 
                IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" 
                Style="{StaticResource ComboBoxToggleButton}"/>
            <Border x:Name="border" Background="White" Margin="{TemplateBinding BorderThickness}">
                <TextBox 
                    x:Name="PART_EditableTextBox" 
                    HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" 
                    IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}" 
                    Margin="{TemplateBinding Padding}" 
                    Style="{StaticResource ComboBoxEditableTextBox}" 
                    IsHitTestVisible="{TemplateBinding IsEditable}"
                    VerticalContentAlignment="Bottom"/>
            </Border>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" TargetName="border" Value="0.56"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocusWithin" Value="true">
                <Setter Property="Foreground" Value="Black"/>
            </Trigger>
            <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
                <Setter Property="Color" TargetName="shadow" Value="#71000000"/>
            </Trigger>
            <Trigger Property="HasItems" Value="false">
                <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true"/>
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </MultiTrigger>
            <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="GreenComboBox" TargetType="{x:Type ComboBox}">
        <Setter Property="Height" Value="23"/>
        <Setter Property="IsEditable" Value="True"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="White"/>
        <Setter Property="BorderBrush" Value="#FFACACAC"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="Padding" Value="6,3,5,3"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="Template" Value="{StaticResource ComboBoxEditableTemplate}"/>
    </Style>
    <Style TargetType="RepeatButton" x:Key="PART_RepeatButtonStyle">
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Cursor" Value="Arrow"/>
        <Setter Property="Background" Value="{StaticResource PrimaryViolet}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RepeatButton">
                    <Border
                        BorderThickness="0"
                        Background="{TemplateBinding Background}">
                        <ContentPresenter/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{StaticResource SecondaryViolet}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource SecondaryViolet}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="Polygon" x:Key="WhiteArrowStyle">
        <Setter Property="IsHitTestVisible" Value="False"/>
        <Setter Property="Fill" Value="White"/>
        <Setter Property="Width" Value="6"/>
        <Setter Property="Height" Value="3"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
    </Style>
    <Style TargetType="TextBox" x:Key="DoubleNumericUpDown">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border 
                        BorderThickness="1" 
                        BorderBrush="{StaticResource BorderGray}">
                        <Grid>
                            <TextBox
                                MinWidth="50"
                                Width="{Binding RelativeSource={RelativeSource AncestorType=TextBox, Mode=FindAncestor}, Path=ActualWidth}"
                                BorderThickness="0"
                                Grid.RowSpan="2"
                                HorizontalAlignment="Right"
                                TextAlignment="Right"
                                FontSize="13"
                                FontFamily="Courier New"
                                Text="{Binding Path=Text, Mode=TwoWay, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=TextBox}, UpdateSourceTrigger=PropertyChanged}"
                                x:Name="PART_NumericTextBox"
                                Padding="2,4,2,0"/>
                            <TextBlock
                                Background="Transparent"
                                Foreground="Gray"
                                Name="PART_placeHolder"
                                FontFamily="Courier New"
                                FontSize="13"
                                Visibility="Collapsed"
                                HorizontalAlignment="Right"
                                IsHitTestVisible="False"
                                Padding="2,4,4,0"
                                TextAlignment="Right"
                                Text="0.00"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding ElementName=PART_NumericTextBox, Path=Text, Converter={StaticResource EmptyStringToBool}}" Value="True">
                            <Setter Property="Visibility" TargetName="PART_placeHolder" Value="Visible"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="TextBox" x:Key="IntegerNumericUpDown">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border 
                        BorderThickness="1" 
                        BorderBrush="{StaticResource BorderGray}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition/>
                                <ColumnDefinition Width="18"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition/>
                                <RowDefinition/>
                            </Grid.RowDefinitions>
                            <TextBox
                                Width="{Binding RelativeSource={RelativeSource AncestorType=TextBox, Mode=FindAncestor}, Path=ActualWidth}"
                                MinWidth="50"
                                BorderThickness="0"
                                Grid.RowSpan="2"
                                HorizontalAlignment="Right"
                                TextAlignment="Right"
                                FontSize="13"
                                FontFamily="Courier New"
                                Text="{Binding Path=Text, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=TextBox}, UpdateSourceTrigger=PropertyChanged}"
                                x:Name="PART_NumericTextBox"
                                Padding="2,4,2,0"/>
                            <RepeatButton 
                                    Style="{StaticResource PART_RepeatButtonStyle}"
                                    Command="{Binding Path=DataContext.IncreaseInteger, RelativeSource={RelativeSource AncestorType=Window, Mode=FindAncestor}}"
                                    Grid.Column="1"
                                    Name="PART_IncreaseValue"
                                    Margin="1,1,1,0.5">
                                <RepeatButton.CommandParameter>
                                    <MultiBinding Converter="{StaticResource ObjectAndProperty}">
                                        <Binding Path="DataContext" RelativeSource="{RelativeSource AncestorType=TextBox, Mode=FindAncestor}"/>
                                        <Binding Path="Tag" RelativeSource="{RelativeSource AncestorType=TextBox, Mode=FindAncestor}"/>
                                    </MultiBinding>
                                </RepeatButton.CommandParameter>
                                <Polygon
                                        Style="{StaticResource WhiteArrowStyle}"
                                        Points="0,3,3,0,6,3"/>
                            </RepeatButton>
                            <RepeatButton
                                    Style="{StaticResource PART_RepeatButtonStyle}"
                                    Grid.Column="1"
                                    Grid.Row="1"
                                    Name="PART_DecreaseValue"
                                    Command="{Binding Path=DataContext.DecreaseInteger, RelativeSource={RelativeSource AncestorType=Window, Mode=FindAncestor}}"
                                    Margin="1,0.5,1,1">
                                <RepeatButton.CommandParameter>
                                    <MultiBinding Converter="{StaticResource ObjectAndProperty}">
                                        <Binding Path="DataContext" RelativeSource="{RelativeSource AncestorType=TextBox, Mode=FindAncestor}"/>
                                        <Binding Path="Tag" RelativeSource="{RelativeSource AncestorType=TextBox, Mode=FindAncestor}"/>
                                    </MultiBinding>
                                </RepeatButton.CommandParameter>
                                <Polygon
                                        Margin="0,1,0,0"
                                        Style="{StaticResource WhiteArrowStyle}"
                                        Points="0,0 3,3 6,0"/>
                            </RepeatButton>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="UpperScrollBarButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border x:Name="border" Background="white" SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="#fafafa"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="#f8f8f8"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
                            <Setter Property="Background" TargetName="border" Value="white"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="LowerScrollBarButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border x:Name="border" Background="white"  SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="#fafafa"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="#f8f8f8"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
                            <Setter Property="Background" TargetName="border" Value="white"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="RepeatButtonTransparent" TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Rectangle Fill="{TemplateBinding Background}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ScrollBarThumbVertical" TargetType="{x:Type Thumb}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border x:Name="rectangle" Background="{StaticResource PrimaryViolet}" Height="{TemplateBinding Height}" SnapsToDevicePixels="True" Width="{TemplateBinding Width}"/>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="rectangle" Value="{StaticResource SecondaryViolet}"/>
                        </Trigger>
                        <Trigger Property="IsDragging" Value="true">
                            <Setter Property="Background" TargetName="rectangle" Value="{StaticResource SecondaryViolet}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="GreenScrollBar" TargetType="{x:Type ScrollBar}">
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
        <Setter Property="Background" Value="{StaticResource ScrollBar.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ScrollBar.Static.Border}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1,0"/>
        <Setter Property="Width" Value="10"/>
        <Setter Property="MinWidth" Value="10"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid x:Name="Bg" SnapsToDevicePixels="true">
                        <Grid.RowDefinitions>
                            <RowDefinition MaxHeight="10"/>
                            <RowDefinition Height="0.00001*"/>
                            <RowDefinition MaxHeight="10"/>
                        </Grid.RowDefinitions>
                        <Border BorderBrush="white" BorderThickness="{TemplateBinding BorderThickness}" Background="white" Grid.Row="1"/>
                        <RepeatButton x:Name="PART_LineUpButton" Command="{x:Static ScrollBar.LineUpCommand}" IsEnabled="{TemplateBinding IsMouseOver}" Style="{StaticResource UpperScrollBarButton}">
                            <Path x:Name="ArrowTop" Data="M 0,4 C0,4 0,6 0,6 0,6 3.5,2.5 3.5,2.5 3.5,2.5 7,6 7,6 7,6 7,4 7,4 7,4 3.5,0.5 3.5,0.5 3.5,0.5 0,4 0,4 z" Fill="{StaticResource PrimaryViolet}"  Stretch="Uniform"/>
                        </RepeatButton>
                        <Track x:Name="PART_Track" IsDirectionReversed="true" IsEnabled="{TemplateBinding IsMouseOver}" Grid.Row="1">
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Command="{x:Static ScrollBar.PageUpCommand}" Style="{StaticResource RepeatButtonTransparent}"/>
                            </Track.DecreaseRepeatButton>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Command="{x:Static ScrollBar.PageDownCommand}" Style="{StaticResource RepeatButtonTransparent}"/>
                            </Track.IncreaseRepeatButton>
                            <Track.Thumb>
                                <Thumb Style="{StaticResource ScrollBarThumbVertical}"/>
                            </Track.Thumb>
                        </Track>
                        <RepeatButton x:Name="PART_LineDownButton" Command="{x:Static ScrollBar.LineDownCommand}" IsEnabled="{TemplateBinding IsMouseOver}" Grid.Row="2" Style="{StaticResource LowerScrollBarButton}">
                            <Path x:Name="ArrowBottom" Data="M 0,2.5 C0,2.5 0,0.5 0,0.5 0,0.5 3.5,4 3.5,4 3.5,4 7,0.5 7,0.5 7,0.5 7,2.5 7,2.5 7,2.5 3.5,6 3.5,6 3.5,6 0,2.5 0,2.5 z" Fill="{StaticResource PrimaryViolet}"  Stretch="Uniform"/>
                        </RepeatButton>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineDownButton}" Value="true"/>
                                <Condition Binding="{Binding IsPressed, ElementName=PART_LineDownButton}" Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Fill" TargetName="ArrowBottom" Value="#217345"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineUpButton}" Value="true"/>
                                <Condition Binding="{Binding IsPressed, ElementName=PART_LineUpButton}" Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Fill" TargetName="ArrowTop" Value="#217345"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineDownButton}" Value="true"/>
                                <Condition Binding="{Binding IsPressed, ElementName=PART_LineDownButton}" Value="false"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Fill" TargetName="ArrowBottom" Value="#217345"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineUpButton}" Value="true"/>
                                <Condition Binding="{Binding IsPressed, ElementName=PART_LineUpButton}" Value="false"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Fill" TargetName="ArrowTop" Value="#217345"/>
                        </MultiDataTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Fill" TargetName="ArrowTop" Value="#005000"/>
                            <Setter Property="Fill" TargetName="ArrowBottom" Value="#005000"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="GreenScrollViewer" TargetType="{x:Type ScrollViewer}">
        <Grid x:Name="Grid" Background="{TemplateBinding Background}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="*"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <Rectangle x:Name="Corner" Grid.Column="1" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" Grid.Row="1"/>
            <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="False" CanVerticallyScroll="false" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="0" Margin="{TemplateBinding Padding}" Grid.Row="0"/>
            <ScrollBar 
                    x:Name="PART_VerticalScrollBar" 
                    AutomationProperties.AutomationId="VerticalScrollBar" 
                    Cursor="Arrow" Grid.Column="1" 
                    Maximum="{TemplateBinding ScrollableHeight}" 
                    Minimum="0" 
                    Grid.Row="0" 
                    Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" 
                    Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" 
                    ViewportSize="{TemplateBinding ViewportHeight}"
                    Style="{StaticResource GreenScrollBar}"/>
            <ScrollBar x:Name="PART_HorizontalScrollBar" AutomationProperties.AutomationId="HorizontalScrollBar" Cursor="Arrow" Grid.Column="0" Maximum="{TemplateBinding ScrollableWidth}" Minimum="0" Orientation="Horizontal" Grid.Row="1" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}"/>
        </Grid>
    </ControlTemplate>

    <Style x:Key="BaseCloseButton" TargetType="Button">
        <Setter Property="Width" Value="45"/>
        <Setter Property="Height" Value="32"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid Background="{TemplateBinding Background}">
                        <Line Width="45" Height="32" Margin="0" X1="18" Y1="12" X2="27" Y2="21" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="1"/>
                        <Line Width="45" Height="32" Margin="0" X1="27" Y1="12" X2="18" Y2="21" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="1"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="Red"/>
                <Setter Property="BorderBrush" Value="White"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="Button" x:Key="WhiteCloseButton" BasedOn="{StaticResource BaseCloseButton}">
        <Setter Property="Background" Value="white"/>
        <Setter Property="BorderBrush" Value="Gray"/>
        <Style.Triggers>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{StaticResource BackgroundGray}"/>
                <Setter Property="BorderBrush" Value="gray"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="Button" x:Key="GrayCloseButton" BasedOn="{StaticResource BaseCloseButton}">
        <Setter Property="Background" Value="{StaticResource BackgroundGray}"/>
        <Setter Property="BorderBrush" Value="Gray"/>
        <Style.Triggers>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{StaticResource LightBackgroundGray}"/>
                <Setter Property="BorderBrush" Value="Gray"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="Button" x:Key="GreenCloseButton" BasedOn="{StaticResource BaseCloseButton}">
        <Setter Property="Background" Value="{StaticResource PrimaryViolet}"/>
        <Setter Property="BorderBrush" Value="White"/>
        <Style.Triggers>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{StaticResource SecondaryViolet}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="BaseMinimizeButton" TargetType="Button">
        <Setter Property="Width" Value="45"/>
        <Setter Property="Height" Value="32"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid Background="{TemplateBinding Background}">
                        <Line Width="45" Height="32" Margin="0" X1="16" Y1="16" X2="28" Y2="16" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="1"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource LightBackgroundGray}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="Button" x:Key="WhiteMinimizeButton" BasedOn="{StaticResource BaseMinimizeButton}">
        <Setter Property="Background" Value="white"/>
        <Setter Property="BorderBrush" Value="Gray"/>
        <Style.Triggers>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{StaticResource BackgroundGray}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="BaseWindowedButton" TargetType="Button">
        <Setter Property="Width" Value="45"/>
        <Setter Property="Height" Value="32"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid Background="{TemplateBinding Background}" Width="45" Height="32">
                        <Rectangle Stroke="Gray" Width="8" Height="8" VerticalAlignment="Top" HorizontalAlignment="Left" Margin="19,11,1,0"/>
                        <Rectangle Stroke="Gray" Width="8" Height="8" VerticalAlignment="Top" HorizontalAlignment="Left" Margin="17,13,0,2" Fill="{TemplateBinding Background}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource LightBackgroundGray}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="Button" x:Key="WhiteWindowedButton" BasedOn="{StaticResource BaseWindowedButton}">
        <Setter Property="Background" Value="white"/>
        <Style.Triggers>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{StaticResource BackgroundGray}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <SolidColorBrush x:Key="OptionMark.Static.Background" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="OptionMark.Static.Border" Color="#FF707070"/>
    <Style x:Key="OptionMarkFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="14,0,0,0" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="BlueCheckBoxStyle" TargetType="{x:Type CheckBox}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource OptionMark.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource OptionMark.Static.Border}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Border x:Name="checkBoxBorder" CornerRadius="2" BorderBrush="{StaticResource PrimaryViolet}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Grid x:Name="markGrid">
                                <Rectangle x:Name="indeterminateMark" Fill="{StaticResource PrimaryViolet}" Opacity="0"/>
                                <Path x:Name="optionMark" Data="F1 M 9.97498,1.22334L 4.6983,9.09834L 4.52164,9.09834L 0,5.19331L 1.27664,3.52165L 4.255,6.08833L 8.33331,1.52588e-005L 9.97498,1.22334 Z " Fill="White" Margin="1" Opacity="0" Stretch="None"/>
                            </Grid>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter" Grid.Column="1" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="true">
                            <Setter Property="FocusVisualStyle" Value="{StaticResource OptionMarkFocusVisual}"/>
                            <Setter Property="Padding" Value="4,0,0,0"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="checkBoxBorder" Value="#eeeeee"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Opacity" TargetName="optionMark" Value="1"/>
                            <Setter Property="Opacity" TargetName="indeterminateMark" Value="1"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Opacity" TargetName="optionMark" Value="0"/>
                            <Setter Property="Opacity" TargetName="indeterminateMark" Value="1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="CheckBox" x:Key="OptionCheckBox" BasedOn="{StaticResource BlueCheckBoxStyle}">
        <Setter Property="Foreground" Value="#262626"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="Margin" Value="5,0,0,0"/>
    </Style>
</ResourceDictionary>